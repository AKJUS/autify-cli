/* tslint:disable */
/* eslint-disable */
/**
 * Autify for Mobile API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
import FormData from 'form-data'
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface InlineResponse201
 */
export interface InlineResponse201 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse201
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2011
 */
export interface InlineResponse2011 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2011
     */
    'id'?: string;
    /**
     * 
     * @type {InlineResponse2011TestPlan}
     * @memberof InlineResponse2011
     */
    'test_plan'?: InlineResponse2011TestPlan;
}
/**
 * 
 * @export
 * @interface InlineResponse2011TestPlan
 */
export interface InlineResponse2011TestPlan {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2011TestPlan
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2011TestPlan
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2011TestPlan
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2011TestPlan
     */
    'updated_at'?: string;
    /**
     * 
     * @type {InlineResponse2011TestPlanBuild}
     * @memberof InlineResponse2011TestPlan
     */
    'build'?: InlineResponse2011TestPlanBuild;
    /**
     * 
     * @type {Array<object>}
     * @memberof InlineResponse2011TestPlan
     */
    'execute_environments'?: Array<object>;
}
/**
 * 
 * @export
 * @interface InlineResponse2011TestPlanBuild
 */
export interface InlineResponse2011TestPlanBuild {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2011TestPlanBuild
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2011TestPlanBuild
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2011TestPlanBuild
     */
    'version'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2011TestPlanBuild
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2011TestPlanBuild
     */
    'updated_at'?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse400
 */
export interface InlineResponse400 {
    /**
     * 
     * @type {Array<InlineResponse400Errors>}
     * @memberof InlineResponse400
     */
    'errors'?: Array<InlineResponse400Errors>;
}
/**
 * 
 * @export
 * @interface InlineResponse400Errors
 */
export interface InlineResponse400Errors {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse400Errors
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface RunTestPlanRequest
 */
export interface RunTestPlanRequest {
    /**
     * 
     * @type {string}
     * @memberof RunTestPlanRequest
     */
    'build_id'?: string;
}

/**
 * BuildsApi - axios parameter creator
 * @export
 */
export const BuildsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Upload the build file.
         * @summary Upload a build
         * @param {string} projectId The ID of the project to upload the build file to.
         * @param {any} file Build file.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadBuild: async (projectId: string, file: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('uploadBuild', 'projectId', projectId)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('uploadBuild', 'file', file)
            const localVarPath = `/projects/{project_id}/builds`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...(localVarFormParams as any).getHeaders?.(), ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BuildsApi - functional programming interface
 * @export
 */
export const BuildsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BuildsApiAxiosParamCreator(configuration)
    return {
        /**
         * Upload the build file.
         * @summary Upload a build
         * @param {string} projectId The ID of the project to upload the build file to.
         * @param {any} file Build file.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadBuild(projectId: string, file: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse201>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadBuild(projectId, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BuildsApi - factory interface
 * @export
 */
export const BuildsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BuildsApiFp(configuration)
    return {
        /**
         * Upload the build file.
         * @summary Upload a build
         * @param {string} projectId The ID of the project to upload the build file to.
         * @param {any} file Build file.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadBuild(projectId: string, file: any, options?: any): AxiosPromise<InlineResponse201> {
            return localVarFp.uploadBuild(projectId, file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BuildsApi - object-oriented interface
 * @export
 * @class BuildsApi
 * @extends {BaseAPI}
 */
export class BuildsApi extends BaseAPI {
    /**
     * Upload the build file.
     * @summary Upload a build
     * @param {string} projectId The ID of the project to upload the build file to.
     * @param {any} file Build file.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuildsApi
     */
    public uploadBuild(projectId: string, file: any, options?: AxiosRequestConfig) {
        return BuildsApiFp(this.configuration).uploadBuild(projectId, file, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TestPlansApi - axios parameter creator
 * @export
 */
export const TestPlansApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Run a test plan
         * @summary Run a test plan
         * @param {string} testPlanId The ID of the test plan to run.
         * @param {RunTestPlanRequest} runTestPlanRequest The build_id to execute the test plan.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runTestPlan: async (testPlanId: string, runTestPlanRequest: RunTestPlanRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'testPlanId' is not null or undefined
            assertParamExists('runTestPlan', 'testPlanId', testPlanId)
            // verify required parameter 'runTestPlanRequest' is not null or undefined
            assertParamExists('runTestPlan', 'runTestPlanRequest', runTestPlanRequest)
            const localVarPath = `/test_plans/{test_plan_id}/test_plan_results`
                .replace(`{${"test_plan_id"}}`, encodeURIComponent(String(testPlanId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(runTestPlanRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TestPlansApi - functional programming interface
 * @export
 */
export const TestPlansApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TestPlansApiAxiosParamCreator(configuration)
    return {
        /**
         * Run a test plan
         * @summary Run a test plan
         * @param {string} testPlanId The ID of the test plan to run.
         * @param {RunTestPlanRequest} runTestPlanRequest The build_id to execute the test plan.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async runTestPlan(testPlanId: string, runTestPlanRequest: RunTestPlanRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2011>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.runTestPlan(testPlanId, runTestPlanRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TestPlansApi - factory interface
 * @export
 */
export const TestPlansApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TestPlansApiFp(configuration)
    return {
        /**
         * Run a test plan
         * @summary Run a test plan
         * @param {string} testPlanId The ID of the test plan to run.
         * @param {RunTestPlanRequest} runTestPlanRequest The build_id to execute the test plan.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        runTestPlan(testPlanId: string, runTestPlanRequest: RunTestPlanRequest, options?: any): AxiosPromise<InlineResponse2011> {
            return localVarFp.runTestPlan(testPlanId, runTestPlanRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TestPlansApi - object-oriented interface
 * @export
 * @class TestPlansApi
 * @extends {BaseAPI}
 */
export class TestPlansApi extends BaseAPI {
    /**
     * Run a test plan
     * @summary Run a test plan
     * @param {string} testPlanId The ID of the test plan to run.
     * @param {RunTestPlanRequest} runTestPlanRequest The build_id to execute the test plan.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestPlansApi
     */
    public runTestPlan(testPlanId: string, runTestPlanRequest: RunTestPlanRequest, options?: AxiosRequestConfig) {
        return TestPlansApiFp(this.configuration).runTestPlan(testPlanId, runTestPlanRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


